source('~/Desktop/gene_dup.R')
df.b$ai_2
df
df$chain_mutated
df.exp$chain
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
show(p.a)
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
df.a
head(df.a)
df.a$ai_2
rm(list=ls())
setwd('~/Desktop')
library(ggplot2)
library(grid)
library(cowplot)
df.exp <- read.table('ancestral_both.txt', head=T, stringsAsFactors = F)
df.cont <- read.table('ancestral_control.txt', head=T, stringsAsFactors = F)
df.cont.a <- df.cont[df$chain_mutated == 'A', ]
df.cont.0.b <- df.cont[df.cont$selected_complex == 0 & df$chain_mutated == 'B', ]
df.cont.1.b <- df.cont[df.cont$selected_complex == 1 & df$chain_mutated == 'B', ]
df <- data.frame(ID = c(rep('Exp', dim(df.exp)[1]), rep('Control A', dim(df.cont.a)[1])),
mutations = c(df.exp$mutations, df.cont.a$mutations),
chain_mutated = c(df.exp$chain, df.cont.a$chain),
identity = c(df.exp$identity_1, df.cont.a$identity_1),
ei_1 = c(df.exp$evolved_interaction_1, df.cont.a$evolved_interaction_1),
ai = c(df.exp$ancestral_interaction_1, df.cont.a$ancestral_interaction_1))
df.cont.a <- df.cont[df$chain_mutated == 'A', ]
df.exp <- read.table('ancestral_both.txt', head=T, stringsAsFactors = F)
df.cont <- read.table('ancestral_control.txt', head=T, stringsAsFactors = F)
df.cont.a <- df.cont[df.cont$chain_mutated == 'A', ]
rm(list=ls())
setwd('~/Desktop')
library(ggplot2)
library(grid)
library(cowplot)
df.exp <- read.table('ancestral_both.txt', head=T, stringsAsFactors = F)
df.cont <- read.table('ancestral_control.txt', head=T, stringsAsFactors = F)
df.cont.a <- df.cont[df.cont$chain_mutated == 'A', ]
df.cont.0.b <- df.cont[df.cont$selected_complex == 0 & df$chain_mutated == 'B', ]
df.cont.1.b <- df.cont[df.cont$selected_complex == 1 & df$chain_mutated == 'B', ]
df <- data.frame(ID = c(rep('Exp', dim(df.exp)[1]), rep('Control A', dim(df.cont.a)[1])),
mutations = c(df.exp$mutations, df.cont.a$mutations),
chain_mutated = c(df.exp$chain, df.cont.a$chain),
identity = c(df.exp$identity_1, df.cont.a$identity_1),
ei_1 = c(df.exp$evolved_interaction_1, df.cont.a$evolved_interaction_1),
ai = c(df.exp$ancestral_interaction_1, df.cont.a$ancestral_interaction_1))
source('~/Desktop/gene_dup.R')
rm(list=ls())
setwd('~/Desktop')
library(ggplot2)
library(grid)
library(cowplot)
df.exp <- read.table('ancestral_both.txt', head=T, stringsAsFactors = F)
df.cont <- read.table('ancestral_control.txt', head=T, stringsAsFactors = F)
df.cont.a <- df.cont[df.cont$chain_mutated == 'A', ]
df.cont.0.b <- df.cont[df.cont$selected_complex == 0 & df$chain_mutated == 'B', ]
df.cont.1.b <- df.cont[df.cont$selected_complex == 1 & df$chain_mutated == 'B', ]
df <- data.frame(ID = c(rep('Exp', dim(df.exp)[1]), rep('Control A', dim(df.cont.a)[1])),
mutations = c(df.exp$mutations, df.cont.a$mutations),
chain_mutated = c(df.exp$chain, df.cont.a$chain),
identity = c(df.exp$identity_1, df.cont.a$identity_1),
ei = c(df.exp$evolved_interaction_1, df.cont.a$evolved_interaction_1),
ai = c(df.exp$ancestral_interaction_1, df.cont.a$ancestral_interaction_1))
p.a <- ggplot(df, aes(x=mutations, y=ai, color=ID)) +
geom_point(alpha=0.5) +
geom_smooth() +
ylab('Ancestral Interaction Energy') +
xlab('Number of Mutations Attempted') +
scale_y_continuous(breaks = seq(-50, 0, by=2), limits=c(-22, -10)) +
scale_x_continuous(breaks = seq(0, 150, by=25))
p.b <- ggplot(df, aes(x=mutations, y=ei, color=ID)) +
geom_point(alpha=0.5) +
geom_smooth() +
ylab('Ancestral Interaction Energy') +
xlab('Number of Mutations Attempted') +
scale_y_continuous(breaks = seq(-50, 0, by=2), limits=c(-22, -10)) +
scale_x_continuous(breaks = seq(0, 150, by=25))
p <- plot_grid(p.a, p.b, cols=2, labels=c('A', 'B'))
show(p)
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
rm(list=ls())
setwd('~/Desktop')
library(ggplot2)
library(grid)
library(cowplot)
df.exp <- read.table('ancestral_both.txt', head=T, stringsAsFactors = F)
df.cont <- read.table('ancestral_control.txt', head=T, stringsAsFactors = F)
df.cont.a <- df.cont[df.cont$chain_mutated == 'A', ]
df.cont.0.b <- df.cont[df.cont$selected_complex == 0 & df$chain_mutated == 'B', ]
df.cont.1.b <- df.cont[df.cont$selected_complex == 1 & df$chain_mutated == 'B', ]
df <- data.frame(ID = c(rep('Exp', dim(df.exp)[1]), rep('ControlA', dim(df.cont.a)[1])),
mutations = c(df.exp$mutations, df.cont.a$mutations),
chain_mutated = c(df.exp$chain, df.cont.a$chain),
identity = c(df.exp$identity_1, df.cont.a$identity_1),
ei = c(df.exp$evolved_interaction_1, df.cont.a$evolved_interaction_1),
ai = c(df.exp$ancestral_interaction_1, df.cont.a$ancestral_interaction_1))
p.a <- ggplot(df, aes(x=mutations, y=ai, color=ID)) +
geom_point(alpha=0.5) +
geom_smooth() +
ylab('Ancestral Interaction Energy') +
xlab('Number of Mutations Attempted') +
scale_y_continuous(breaks = seq(-50, 0, by=2), limits=c(-22, -10)) +
scale_x_continuous(breaks = seq(0, 150, by=25))
p.b <- ggplot(df, aes(x=mutations, y=ei, color=ID)) +
geom_point(alpha=0.5) +
geom_smooth() +
ylab('Ancestral Interaction Energy') +
xlab('Number of Mutations Attempted') +
scale_y_continuous(breaks = seq(-50, 0, by=2), limits=c(-22, -10)) +
scale_x_continuous(breaks = seq(0, 150, by=25))
p <- plot_grid(p.a, p.b, cols=2, labels=c('A', 'B'))
show(p)
df
dim(df.cont.a)[1]
df.cont
head(df.cont)
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
df.cont.a$ancestral_interaction_2
df.cont.a$ancestral_interaction_1
df$chain_mutated
source('~/Desktop/gene_dup.R')
df$chain_mutated
df.exp.a
source('~/Desktop/gene_dup.R')
df
df$chain_mutated
source('~/Desktop/gene_dup.R')
c(df.exp.b$chain, df.cont.0.b$chain, df.cont.1.b$chain)
source('~/Desktop/gene_dup.R')
rm(list=ls())
setwd('~/Desktop')
library(ggplot2)
library(grid)
library(cowplot)
df.exp <- read.table('ancestral_both.txt', head=T, stringsAsFactors = F)
df.exp.a <- df.exp[df.exp$chain == 'A', ]
df.exp.b <- df.exp[df.exp$chain == 'B', ]
df.cont <- read.table('ancestral_control.txt', head=T, stringsAsFactors = F)
df.cont.a <- df.cont[df.cont$chain == 'A', ]
df.cont.b <- df.cont[df.cont$chain == 'B', ]
df.cont.0.b <- df.cont[df.cont$selected_complex == 0 & df$chain == 'B', ]
df.cont.1.b <- df.cont[df.cont$selected_complex == 1 & df$chain == 'B', ]
df.exp <- read.table('ancestral_both.txt', head=T, stringsAsFactors = F)
df.exp.a <- df.exp[df.exp$chain == 'A', ]
df.exp.b <- df.exp[df.exp$chain == 'B', ]
df.cont <- read.table('ancestral_control.txt', head=T, stringsAsFactors = F)
df.cont.a <- df.cont[df.cont$chain == 'A', ]
df.cont.b <- df.cont[df.cont$chain == 'B', ]
df.cont.0.b <- df.cont[df.cont$selected_complex == 0 && df$chain == 'B', ]
df.cont.1.b <- df.cont[df.cont$selected_complex == 1 && df$chain == 'B', ]
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
(110+156*2)
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
df.b.s
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
warnings()
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
df.a
df.a$ei
df.a[675]
df.a[675,]
df.a[671,]
df.a[670,]
df.a[669,]
df.a[668,]
df.a[669,]
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
source('~/Desktop/gene_dup.R')
a <- read.table('kept_mutants.dat', head=T, stringsAsFactors = F)
a <- read.table('kept_mutants.dat', head=T, stringsAsFactors = F)
a <- read.table('kept_mutants.dat', head=T, stringsAsFactors = F)
a <- read.table('kept_mutants.dat', head=T, stringsAsFactors = F)
a.0 <- a[a$selected_chain == 0, ]
a.1 <- a[a$selected_chain == 1, ]
b <- data.frame(mutations = c(a.0$count, a.1$count), )
b <- data.frame(mutations = c(a.0$count, a.1$count), stability.selected = c(a.0$stability2_a, a.1$stability2_b), stability.unselected = c(a.0$stability2_b, a.1$stability2_a), binding.selected = c(a.0$binding_a, a.1$binding_b), binding.unselected = c(a.0$binding_b, a.1$binding_a))
b <- data.frame(mutations = c(a.0$count, a.1$count), stability.selected = c(a.0$stability2_a, a.1$stability2_b), stability.unselected = c(a.0$stability2_b, a.1$stability2_a), binding.selected = c(a.0$binding_a, a.1$binding_b), binding.unselected = c(a.0$binding_b, a.1$binding_a), stringsAsFactors = F)
b
library(ggplot2)
library(grid)
library(cowplot)
p.binding.s <- ggplot(b, aes(x=mutations, y=binding.selected)) + geom_smooth(se=F) + geom_point(alpha=0.5)
show(p.binding.s)
p.binding.s <- ggplot(b, aes(x=mutations, y=binding.selected)) + geom_smooth() + geom_point(alpha=0.5)
show(p.binding.s)
p.binding.s <- ggplot(b, aes(x=mutations, y=binding.selected)) + geom_smooth(se=F, method = lm) + geom_point(alpha=0.5)
show(p.binding.s)
p.binding.s <- ggplot(b, aes(x=mutations, y=binding.selected)) + geom_smooth(se=F, method = "loess") + geom_point(alpha=0.5)
show(p.binding.s)
p.binding.s <- ggplot(b, aes(x=mutations, y=binding.selected)) + geom_smooth(se=F, method = "loess") + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.binding.s)
p.binding.s <- ggplot(b, aes(x=mutations, y=binding.selected)) + stat_smooth(se=F, method = "lm", formula = y ~ poly(x, 2)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.binding.s)
p.binding.u <- ggplot(b, aes(x=mutations, y=binding.unselected)) + stat_smooth(se=F, method = "lm", formula = y ~ poly(x, 2)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.binding.s)
show(p.binding.u)
p.binding.u <- ggplot(b, aes(x=mutations, y=binding.unselected)) + stat_smooth(se=F, method = "lm", formula = y ~ poly(x, 3)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.binding.u)
p.binding.u <- ggplot(b, aes(x=mutations, y=binding.unselected)) + stat_smooth(se=F, method = "loess") + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.binding.u)
p.binding.u <- ggplot(b, aes(x=mutations, y=binding.unselected)) + stat_smooth(se=F, method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.binding.u)
p.binding.u <- ggplot(b, aes(x=mutations, y=binding.unselected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.binding.u)
p.stability.u <- ggplot(b, aes(x=mutations, y=stability.unselected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-25, 5))
show(p.stability.u)
head(b)
p.stability.u <- ggplot(b, aes(x=mutations, y=stability.unselected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-100, 100))
head(b)
show(p.stability.u)
p.stability.s <- ggplot(b, aes(x=mutations, y=stability.selected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(-100, 100))
show(p.stability.s)
p.stability.s <- ggplot(b, aes(x=mutations, y=stability.selected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(20, 50))
show(p.stability.s)
p.stability.s <- ggplot(b, aes(x=mutations, y=stability.selected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(25, 35))
show(p.stability.s)
p.stability.u <- ggplot(b, aes(x=mutations, y=stability.unselected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(25, 35))
show(p.stability.s)
show(p.stability.u)
p.stability.u <- ggplot(b, aes(x=mutations, y=stability.unselected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(15, 45))
show(p.stability.u)
p.stability.u <- ggplot(b, aes(x=mutations, y=stability.unselected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(25, 40))
show(p.stability.u)
p.stability.u <- ggplot(b, aes(x=mutations, y=stability.unselected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(20, 40))
show(p.stability.u)
p.stability.s <- ggplot(b, aes(x=mutations, y=stability.selected)) + stat_smooth(method = "lm", formula = y ~ poly(x, 1)) + geom_point(alpha=0.5) + scale_y_continuous(limits=c(20, 40))
show(p.stability.s)
source('~/Google Drive/Data/influenza_pH1N1_timecourse/NA/dNdS/distances/calc_correlations.R')
pi
distances <- read.table('distances.dat', sep=',')
setwd('~/Google Drive/Data/influenza_pH1N1_timecourse/HA/dNdS/distances/')
distances <- read.table('distances.dat', sep=',')
dist <- distances[1,]
g(dist[dist!=0], 1)
g <- function(dist) {
m <- mean(dist)
sd <- sd(dist)
1/(sigma*sqrt(2*pi))*exp(-(dist-m)^2/(2*sigma^2))
}
g(dist[dist!=0], 1)
g(dist[dist!=0])
g <- function(dist) {
m <- mean(dist)
sigma <- sd(dist)
1/(sigma*sqrt(2*pi))*exp(-(dist-m)^2/(2*sigma^2))
}
g(dist[dist!=0])
lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0])))
rm(list = ls())
distances <- read.table('distances.dat', sep=',')
maxs <- c()
mins <- c()
means <- c()
sds <- c()
for(i in 1:25){
rates <- read.table(paste('site_rates/rates_', i, '.dat', sep=''), sep=',', head=T)
map <- read.table(paste('structure_maps/map_', i, '.txt', sep=''), head=F)
rates <- rates[map$V1 != '-', ]
correlations <- sapply(distances, function(x) cor(1/(x^100)[x!=0], rates$dN.dS[x!=0]))
correlations <- data.frame(correlations = correlations)
#write.table(correlations, file=paste('correlations/n1_', i, '.correlations', sep=''), row.names=F, col.names=F)
maxs <- append(maxs, max(correlations$correlations))
mins <- append(mins, min(correlations$correlations))
means <- append(means, mean(correlations$correlations))
sds <- append(sds, sd(correlations$correlations))
#print(max(correlations$correlations))
}
g <- function(dist) {
m <- mean(dist)
sigma <- sd(dist)
1/(sigma*sqrt(2*pi))*exp(-(dist-m)^2/(2*sigma^2))
}
dist <- distances[1,]
lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0])))
summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0]))))
source('~/Desktop/test.R')
summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], 1))))
xs <- seq(0, 10, by=.1)
xs <- xs[xs!=0]
maxs.by.exponent <- sapply(xs, function(x) max(sapply(distances, function(dist) summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], 1)))) )))
g <- function(dist, width) {
m <- 0
sigma <- width
1/(sigma*sqrt(2*pi))*exp(-(dist-m)^2/(2*sigma^2))
}
xs <- seq(0, 10, by=.1)
xs <- xs[xs!=0]
maxs.by.exponent <- sapply(xs, function(x) max(sapply(distances, function(dist) summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], x)))) )))
summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], 1))))
sapply(distances, function(dist) summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], x)))) )
sapply(distances, function(dist) summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], 1)))) )
sapply(distances, function(dist) summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], x))))$r.square )
sapply(distances, function(dist) summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], 1))))$r.square )
g <- function(dist, width) {
m <- 0
sigma <- width
1/(sigma*sqrt(2*pi))*exp(-(dist-m)^2/(2*sigma^2))
}
xs <- seq(0, 10, by=.1)
xs <- xs[xs!=0]
maxs.by.exponent <- sapply(xs, function(x) max(sapply(distances, function(dist) summary(lm(rates$dN.dS[dist!=0] ~ I(g(dist[dist!=0], x))))$r.square)))
rm(list = ls())
d <- read.table('~/Google Drive/Data/influenza_HA_evolution/data_table/numbering_table_unix.csv', sep=',', head=T, stringsAsFactors = F)
d <- d[!is.na(d$pdb.4fnk), ]
rm(list = ls())
d <- read.table('~/Google Drive/Data/influenza_HA_evolution/data_table/numbering_table_unix.csv', sep=',', head=T, stringsAsFactors = F)
d <- d[!is.na(d$pdb.4fnk), ]
distances <- read.table('~/Google Drive/Data/influenza_HA_evolution/distance_plots/distances.dat', sep=',')
g <- function(dist, width) {
m <- 0
sigma <- width
1/(sigma*sqrt(2*pi))*exp(-(dist-m)^2/(2*sigma^2))
}
xs <- seq(0, 10, by=1)
xs <- xs[xs!=0]
maxs.by.exponent <- sapply(xs, function(x) max(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], x))))$r.square)))
maxs.by.exponent
sqrt(0.184)
xs
xs <- seq(-10, 10, by=1)
xs <- xs
maxs.by.exponent <- sapply(xs, function(x) max(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], x))))$r.square)))
source('~/Desktop/test.R')
source('~/Desktop/test.R')
plot(xs, maxs.by.exponent)
source('~/Desktop/test.R')
plot(xs, maxs.by.exponent)
sqrt(1.2)
sqrt(min(maxs.by.exponent))
maxs.by.exponent
source('~/Desktop/test.R')
maxs.by.exponent
plot(xs, maxs.by.exponent)
maxs.by.exponent
plot(xs, maxs.by.exponent)
max(maxs.by.exponent)
sqrt(0.185)
source('~/Desktop/test.R')
source('~/Desktop/test.R')
plot(xs, maxs.by.exponent)
source('~/Desktop/test.R')
plot(xs, maxs.by.exponent)
max(maxs.by.exponent)
xs[maxs.by.exponent == max(maxs.by.exponent)]
summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], x))))
summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], max9maxs.by.exponent)))))
summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], max(maxs.by.exponent)))))
lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], max(maxs.by.exponent))))
lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], 3.3))
)
sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], x))))$r.square)
sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], max(maxs.by.exponent)))))$r.square)
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], max(maxs.by.exponent)))))$r.square))
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], xs[maxs.by.exponent == max(maxs.by.exponent)]))))$r.square))
xs[maxs.by.exponent == max(maxs.by.exponent)]
source('~/Desktop/test.R')
xs[maxs.by.exponent == max(maxs.by.exponent)]
cors
plot(cors)
cors <- as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], xs[maxs.by.exponent == max(maxs.by.exponent)]))))$r.square))
two.sites.cors <- as.vector(sapply(distances,
function(dist2) sapply(distances,
function(dist1) summary(lm(d$FEL.dN.dS[dist1!=0 and dist2!=0] ~ d$RSA.Multimer[dist1!=0 and dist2!=0] + I(g(dist1[dist1!=0 and dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)])) + I(g(dist2[dist1!=0 and dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)]))))$r.square))
two.sites.cors <- as.vector(sapply(distances,
function(dist2) sapply(distances,
function(dist1) summary(lm(d$FEL.dN.dS[dist1!=0 & dist2!=0] ~ d$RSA.Multimer[dist1!=0 & dist2!=0] + I(g(dist1[dist1!=0 & dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)])) + I(g(dist2[dist1!=0 & dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)]))))$r.square))
two.sites.cors <- as.vector(sapply(distances,
function(dist2) sapply(distances,
function(dist1) summary(lm(d$FEL.dN.dS[dist1!=0 & dist2!=0] ~ d$RSA.Multimer[dist1!=0 & dist2!=0] + I(g(dist1[dist1!=0 & dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)])) + I(g(dist2[dist1!=0 & dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)]))))$r.square)))
two.sites.cors <- as.vector(sapply(distances,
function(dist2) sapply(distances,
function(dist1) summary(lm(d$FEL.dN.dS[dist1!=0 & dist2!=0] ~ d$RSA.Multimer[dist1!=0 & dist2!=0] + I(g(dist1[dist1!=0 & dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)])) + I(g(dist2[dist1!=0 & dist2!=0], xs[maxs.by.exponent == max(maxs.by.exponent)]))))$r.square)))
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], xs[maxs.by.exponent == max(maxs.by.exponent)]))))$r.square))
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], 3.3)))$r.square))
)
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ d$RSA.Multimer[dist!=0] + I(g(dist[dist!=0], 3.3))))$r.square))
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3))))$r.square))
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3))))$r.square))
ptm <- proc.time()
print(as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3))))$r.square)))
proc.time() - ptm
ptm <- proc.time()
as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3))))$r.square))
proc.time() - ptm
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
dim(distances)
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
g(distances[top.dog, ], 3.3)
source('~/Desktop/test.R')
print(as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3)) + g(distances[top.dog & dist!=0, ], 3.3)))$r.square)))
g(distances[top.dog & dist!=0, ], 3.3)
g(distances[top.dog & dist!=0, ], 3.3)
top.dog
g(distances[top.dog, ], 3.3)
as.vector(g(distances[top.dog, ], 3.3))
print(as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3)) + as.vector(g(distances[top.dog, ], 3.3))[dist!=0]))$r.square)))
as.vector(g(distances[top.dog, ], 3.3))
print(as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3)) + as.vector(g(distances[top.dog, ], 3.3))[dist!=0]))$r.square)))
print(as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3)) + top.vector[dist!=0]))$r.square)))
top.vector <- as.vector(g(distances[top.dog, ], 3.3))
print(as.vector(sapply(distances, function(dist) summary(lm(d$FEL.dN.dS[dist!=0] ~ I(g(dist[dist!=0], 3.3)) + top.vector[dist!=0]))$r.square)))
top.vector
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
plot(lm.cors)
plot(lm2.cors)
plot(lm.cors)
plot(lm2.cors)
plot(lm.cors)
plot(lm2.cors)
plot(lm.cors)
plot(lm2.cors)
plot(lm.cors)
plot(sqrt(lm.cors))
points(sqrt(lm2.cors), col='red')
plot(sqrt(lm.cors), ylim=c(0,1))
points(sqrt(lm2.cors), col='red')
plot(sqrt(lm.cors), ylim=c(0,1), col='red')
points(sqrt(lm2.cors), col='black')
plot(sqrt(lm.cors), ylim=c(0,1), col='red')
points(sqrt(lm2.cors), col='black')
